-module(prototype).
-export([start_link/2, stop/1]).
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).
-behaviour(gen_server).

-record(state, {name="", role, skill=good}).
-define(DELAY, 750).

start_link(Role, Skill) ->
	gen_server:start_link({local, Role}, ?MODULE, [Role, Skill], []).

stop(Role) -> gen_server:call(Role, stop).

init([Role, Skill]) ->
	%% To know when the parent shuts down
	process_flag(trap_exit, true),
	%% sets a seed for random number generation for the life of the process
	%% uses the current time to do it. unique value generated by now()
	random:seed(now()),
	TimeToPlay = random:uniform(3000),
	StrRole = atom_to_list(Role),
	Name = pick_name(Role),
	io:format("Process ~s have started~n",
		[StrRole]),
	{ok, #state{name=Name, role=StrRole, skill=Skill}, TimeToPlay}.

pick_name(twitter) ->
	"Twitter";
pick_name(database) ->
	"Database";
pick_name(the_movie_db) ->
	"The movie db". 


handle_call(terminate, _From, S) ->
	{stop, normal, ok, S};

handle_call(_Message, _From, S) ->
	{noreply, S, ?DELAY}.

handle_cast(_Message, S) ->
	{noreply, S, ?DELAY}.

handle_info(timeout, S = #state{name=N, skill=good}) ->
	io:format("~s is working well!~n", [N]),
	{noreply, S, ?DELAY};

handle_info(timeout, S = #state{name=N, skill=bad}) ->
	case random:uniform(10) of
		1 ->
			io:format("~s is down!~n", [N]),
			{stop, bad_shutdown, S};
		_ ->
			io:format("~s is working well!~n", [N]),
			{noreply, S, ?DELAY}
	end;
handle_info(_Message, S) ->
	{noreply, S, ?DELAY}.

terminate(normal, S) ->
	io:format("~s has shut down normally.~n", [S#state.name]);
terminate(bad_shutdown, S) ->
	io:format("~s went down unexpectedly.~n", [S#state.name]);
terminate(shutdown, S) ->
	io:format("The supervisor shut down ~s.~n", [S#state.name]);
terminate(_Reason, S) ->
	io:format("~s terminated for some reason~n", [S#state.name]).

code_change(_OldVsn, State, _Extra) ->
	%% No change planned. The function is there for the behaviour,
	%% but will not be used. Only a version on the next
	{ok, State}.